

# Standard environment setup.
env_template: &ENVIRONMENT
  environment:
    LC_ALL: C
    CIRRUS_CLONE_DEPTH: 1
  timeout_in: 10m

# Standard compilation and testing rules
compile_template: &COMPILE
  compile_script:
    - autoreconf -i
    - ./configure
    - make -j4

  test_script:
    - make check

#  on_failure:
#    - cat tests/test-suite.log


# ----------
# Linux

task:
  << : *ENVIRONMENT
  name: linux-gcc
  container:
    memory: 1G
    image: gcc:latest

  # Base environment already includes the packages we need.
  << : *COMPILE

# CentOS
centos_task:
  << : *ENVIRONMENT
  name: centos-gcc
  container:
    image: centos:latest
    cpu: 2
    memory: 1G

  environment:
    PATH: ${PATH}:`pwd`/cache

  # See https://cirrus-ci.org/guide/writing-tasks/#cache-instruction
  install_cache:
    folder: cache
    populate_script: |
      yum install --install-root `pwd`/cache -y \
          autoconf automake libtool make gcc zlib-devel \
          bzip2 bzip2-devel git diffutils

#  # NB: we could consider building a docker image with these
#  # preinstalled and specifying that instead, to speed up testing.
#  install_script: |
#    yum install -y autoconf automake libtool make gcc zlib-devel \
#        bzip2 bzip2-devel git diffutils

  << : *COMPILE

# ----------
# MacOS X
task:
  << : *ENVIRONMENT
  name: macosx
  osx_instance:
    image: catalina-base

  package_install_script:
    - brew install autoconf automake libtool

  << : *COMPILE


# ----------
# Windows MINGW
task:
  << : *ENVIRONMENT
  name: windows-1
  windows_container:
    image: cirrusci/windowsservercore:cmake

#  install_script:
#    - choco install -y --no-progress mingw
#...
#    - set PATH=%PATH%;C:\Program Files\cmake\bin;C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin

#  setup_script:
#    - set PATH=C:\tools\msys64\usr\bin;c:\tools\msys64\mingw64\bin;%PATH%
#    - pacman --noconfirm -S gcc

  # See https://cirrus-ci.org/guide/writing-tasks/#cache-instruction
  mingw_cache:
    folder: C:\ProgramData\chocolatey
    # default fingerprint is task name (windows-X above)
    populate_script:
      - choco install -y mingw

#  install_script:
#    - dir C:\ProgramData\chocolatey\bin
#    - choco install -y mingw

  compile_script:
    - set PATH=%PATH%;C:\Program Files\cmake\bin;C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
    - dir C:\Program Files
    - mingw32-make

#    - c:\tools\msys64\usr\bin\bash --login "%CD%\scripts\build.sh"
